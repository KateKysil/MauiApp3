//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyGrammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class MyGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, NUMBER=11, IDENTIFIER=12, WS=13;
	public const int
		RULE_compileUnit = 0, RULE_expression = 1;
	public static readonly string[] ruleNames = {
		"compileUnit", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'-'", "'+'", "'^'", "'*'", "'/'", "'max'", "'('", "','", "')'", 
		"'min'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "NUMBER", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MyGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MyGrammarParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; expression(0);
			State = 5; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinFunctionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MinFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterMinFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitMinFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(MyGrammarParser.NUMBER, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MyGrammarParser.IDENTIFIER, 0); }
		public IdentifierExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPlusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterUnaryPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitUnaryPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxFunctionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MaxFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterMaxFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitMaxFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.EnterUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammarListener typedListener = listener as IMyGrammarListener;
			if (typedListener != null) typedListener.ExitUnaryMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammarVisitor<TResult> typedVisitor = visitor as IMyGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new UnaryMinusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 8; Match(T__0);
				State = 9; expression(12);
				}
				break;
			case T__1:
				{
				_localctx = new UnaryPlusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 10; Match(T__1);
				State = 11; expression(11);
				}
				break;
			case T__5:
				{
				_localctx = new MaxFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12; Match(T__5);
				State = 13; Match(T__6);
				State = 14; expression(0);
				State = 15; Match(T__7);
				State = 16; expression(0);
				State = 17; Match(T__8);
				}
				break;
			case T__9:
				{
				_localctx = new MinFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19; Match(T__9);
				State = 20; Match(T__6);
				State = 21; expression(0);
				State = 22; Match(T__7);
				State = 23; expression(0);
				State = 24; Match(T__8);
				}
				break;
			case T__6:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; Match(T__6);
				State = 27; expression(0);
				State = 28; Match(T__8);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30; Match(NUMBER);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 31; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 49;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new ExponentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 34;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 35; Match(T__2);
						State = 36; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new MultiplyContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 37;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 38; Match(T__3);
						State = 39; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new DivideContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 40;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 41; Match(T__4);
						State = 42; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new AddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 43;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 44; Match(T__1);
						State = 45; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new SubtractContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 46;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 47; Match(T__0);
						State = 48; expression(7);
						}
						break;
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '\x39', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '#', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x34', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x37', 
		'\v', '\x3', '\x3', '\x3', '\x2', '\x3', '\x4', '\x4', '\x2', '\x4', '\x2', 
		'\x2', '\x2', '\x41', '\x2', '\x6', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\x6', '\a', '\x5', '\x4', '\x3', '\x2', 
		'\a', '\b', '\a', '\x2', '\x2', '\x3', '\b', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\n', '\b', '\x3', '\x1', '\x2', '\n', '\v', '\a', '\x3', 
		'\x2', '\x2', '\v', '#', '\x5', '\x4', '\x3', '\xE', '\f', '\r', '\a', 
		'\x4', '\x2', '\x2', '\r', '#', '\x5', '\x4', '\x3', '\r', '\xE', '\xF', 
		'\a', '\b', '\x2', '\x2', '\xF', '\x10', '\a', '\t', '\x2', '\x2', '\x10', 
		'\x11', '\x5', '\x4', '\x3', '\x2', '\x11', '\x12', '\a', '\n', '\x2', 
		'\x2', '\x12', '\x13', '\x5', '\x4', '\x3', '\x2', '\x13', '\x14', '\a', 
		'\v', '\x2', '\x2', '\x14', '#', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', 
		'\a', '\f', '\x2', '\x2', '\x16', '\x17', '\a', '\t', '\x2', '\x2', '\x17', 
		'\x18', '\x5', '\x4', '\x3', '\x2', '\x18', '\x19', '\a', '\n', '\x2', 
		'\x2', '\x19', '\x1A', '\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\a', 
		'\v', '\x2', '\x2', '\x1B', '#', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\a', '\t', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\x4', '\x3', '\x2', 
		'\x1E', '\x1F', '\a', '\v', '\x2', '\x2', '\x1F', '#', '\x3', '\x2', '\x2', 
		'\x2', ' ', '#', '\a', '\r', '\x2', '\x2', '!', '#', '\a', '\xE', '\x2', 
		'\x2', '\"', '\t', '\x3', '\x2', '\x2', '\x2', '\"', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xE', '\x3', '\x2', '\x2', '\x2', '\"', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x1C', '\x3', '\x2', '\x2', '\x2', '\"', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '$', '%', '\f', '\f', '\x2', '\x2', 
		'%', '&', '\a', '\x5', '\x2', '\x2', '&', '\x34', '\x5', '\x4', '\x3', 
		'\r', '\'', '(', '\f', '\v', '\x2', '\x2', '(', ')', '\a', '\x6', '\x2', 
		'\x2', ')', '\x34', '\x5', '\x4', '\x3', '\f', '*', '+', '\f', '\n', '\x2', 
		'\x2', '+', ',', '\a', '\a', '\x2', '\x2', ',', '\x34', '\x5', '\x4', 
		'\x3', '\v', '-', '.', '\f', '\t', '\x2', '\x2', '.', '/', '\a', '\x4', 
		'\x2', '\x2', '/', '\x34', '\x5', '\x4', '\x3', '\n', '\x30', '\x31', 
		'\f', '\b', '\x2', '\x2', '\x31', '\x32', '\a', '\x3', '\x2', '\x2', '\x32', 
		'\x34', '\x5', '\x4', '\x3', '\t', '\x33', '$', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\'', '\x3', '\x2', '\x2', '\x2', '\x33', '*', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '-', '\x3', '\x2', '\x2', '\x2', '\x33', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x5', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\"', '\x33', '\x35',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
